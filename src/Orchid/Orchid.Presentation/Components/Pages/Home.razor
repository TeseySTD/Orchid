@page "/"
@using Orchid.Application.Common
@using Orchid.Core.Models.ValueObjects
@inject IBookResourcesManager BookResourceManager;

<h1>Orchid - sync book reader.</h1>

<button @onclick="PickFile">Choose a file</button>
@if (!string.IsNullOrEmpty(filePath))
{
    <p>Selected file: @filePath</p>
    <button @onclick="ReadBook">Read book</button>
}

@if (_showBookData)
{
    <h2>Book Details</h2>
    <p>Title: @_title</p>
    <p>Author: @_author</p>
    <p>Cover: </p>
    <img src="@_cover.Path" width="150px" height="auto" alt="Cover"/>
    <p>Chapters count: @_chaptersCount</p>

    <p>Content:</p>
    <ChapterView ChapterHtml="@_currentChapter.Html" BookCss="@_css"/>
    <p>Current chapter: @_currentIndex</p>
    
    <button @onclick="NextChapter">></button>
}

@code
{
    private string? filePath;
    private BookTitle _title;
    private Author _author;
    private Cover _cover;
    private IEnumerable<CssFile> _css;
    private int _chaptersCount;
    private bool _showBookData = false;
    private int _currentIndex = 0;
    private Chapter _currentChapter;

    private async Task PickFile()
    {
        var result = await FilePicker.PickAsync();
        if (result != null)
        {
            filePath = result.FullPath;
        }
    }

    private async Task ReadBook()
    {
        if (filePath is not null)
        {
            var book = await BookResourceManager.ReadBookAsync(filePath, FileSystem.Current.CacheDirectory);
            _title = book.Title;
            _author = book.Authors[0];
            _chaptersCount = book.Metadata.ChaptersCount;
            _cover = book.Cover ?? await DefaultCover();
            _css = await BookResourceManager.GetBookCssFilesAsync(filePath);
            _showBookData = true;
            _currentChapter = await BookResourceManager.ReadChapterAsync(filePath, _currentIndex);
        }
    }

    public async Task NextChapter()
    {
        _currentIndex++;
        _currentChapter = await BookResourceManager.ReadChapterAsync(filePath, _currentIndex);
    }
    
    private async Task<Cover> DefaultCover()
    {
        var imageName = "no_cover_image.png";
        ImageSource.FromFile(imageName);
        using Stream fileStream = await FileSystem.OpenAppPackageFileAsync($"wwwroot/images/{imageName}");
        using MemoryStream memoryStream = new();
        await fileStream.CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        return Cover.Create($"images/{imageName}", bytes)!;
    }
}